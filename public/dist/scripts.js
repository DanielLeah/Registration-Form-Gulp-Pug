var registrationController=function(){function l(e){return!!e.match(/^[a-zA-Z]+$/)}return{getValidation:function(e,t,n,a){return{firstNameVal:l(e),lastNameVal:l(t),emailVal:function(e){return!!/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(e)}(n),genderVal:function(e){return"choose"!=e}(a)}}}}(),UIController=function(){var t={firstname:"firstname",lastname:"lastname",email:"email",gender:"gender",bday:"bday",submitButton:".btn"};return{getInputs:function(){return{firstName:document.getElementById(t.firstname).value,lastName:document.getElementById(t.lastname).value,email:document.getElementById(t.email).value,gender:document.getElementById(t.gender).value,bday:document.getElementById(t.bday).value}},getDOMStrings:function(){return t},setClasses:function(e,t){!function(e,t){!0!==e?(document.querySelector("."+t).classList.remove("hidden"),document.querySelector("."+t).classList.add("invalid")):(document.querySelector("."+t).classList.remove("hidden"),document.querySelector("."+t).classList.add("valid"))}(e,t)},initClasses:function(){!function(){for(var e=document.getElementsByClassName("icon"),t=0;t<e.length;t++)e[t].classList.add("hidden"),e[t].classList.remove("invalid"),e[t].classList.remove("valid")}()},updateData:function(e){!function(e){document.getElementById(t.firstname).value=e.firstName,document.getElementById(t.lastname).value=e.lastName,document.getElementById(t.email).value=e.email,document.getElementById(t.gender).value=e.gender,document.getElementById(t.bday).value=e.bday}(e)}}}(),controller=function(a,l){var o,t=function(){var e,t,n;e=l.getInputs(),l.initClasses(),""!==e.firstname&&""!==e.lastname&&(t=a.getValidation(e.firstName,e.lastName,e.email,e.gender)),n=!0,Object.keys(t).forEach(function(e){l.setClasses(t[e],e),!1===t[e]&&(n=!1)}),n?(localStorage.setItem("formInputs",JSON.stringify(e)),console.log("if valid"),o=JSON.parse(localStorage.getItem("formInputs")),s(),setTimeout(function(){l.updateData(o)},1500)):console.log("not saved")};function s(){document.getElementById("firstname").value="",document.getElementById("lastname").value="",document.getElementById("email").value="",document.getElementById("gender").value="choose",document.getElementById("bday").value="",l.initClasses()}return{init:function(){console.log("Application has started."),l.initClasses(),function(){var e=l.getDOMStrings();document.querySelector(e.submitButton).addEventListener("click",t),document.addEventListener("keypress",function(e){13===e.keyCode&&t()})}()},clearLocalInputs:function(){s()}}}(registrationController,UIController),templateHTML=templates["testing-data"]({message:JSON.stringify(JSON.parse(localStorage.getItem("formInputs")))});document.write(templateHTML),controller.init();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
